services:
  # --- Backend Service (Bun + ExpressJS) ---
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    env_file: .env.server
    volumes:
      - /server/node_modules
    ports:
      - "8000:8000"
    expose:
      - 8000
    networks:
      - devzoku
    develop:
      watch:
        - action: sync
          path: ./server/src
          target: /server/src
        - action: rebuild
          path: ./server/package.json
          target: /server/package.json
        - action: rebuild
          path: ./server/bun.lockb
          target: /server/bun.lockb
        - action: rebuild
          path: ./server/Dockerfile
          target: /server/Dockerfile
    depends_on:
      - postgres
      - valkey
      - qdrant

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: devzoku-worker
    env_file: .env.worker
    restart: unless-stopped
    networks:
      - devzoku

  migrator:
    build:
      context: ./server # Backend ke Dockerfile ko use karega
      dockerfile: Dockerfile.dev
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      - postgres
    command: bun run db:push # Tumhara migration command
    networks:
      - devzoku
    restart: "no"

  # --- Frontend Service (Bun + Next.js) ---
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    volumes:
      - /client/node_modules
      - /client/.next
    command: bun run dev
    networks:
      - devzoku
    depends_on:
      - server
    ports:
      - "3000:3000"
    develop:
      watch:
        - action: sync
          path: ./client/src
          target: /client/src
        - action: rebuild
          path: ./client/package.json
          target: /client/package.json
        - action: rebuild
          path: ./client/bun.lockb
          target: /client/bun.lockb
        - action: rebuild
          path: ./client/Dockerfile
          target: /client/Dockerfile

  postgres:
    image: postgres:17.5-alpine3.22
    restart: always
    environment:
      POSTGRES_DB: devzoku-db
      POSTGRES_USER: sneha
      POSTGRES_PASSWORD: sneha
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - devzoku

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - devzoku

  valkey:
    image: valkey/valkey:8.1.3-alpine3.22
    ports:
      - 6379:6379
    restart: always
    volumes:
      - valkey_data:/data
    networks:
      - devzoku

  qdrant:
    image: qdrant/qdrant
    ports:
      - 6333:6333
    restart: always
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - devzoku

networks:
  devzoku:
    driver: bridge

volumes:
  postgres_data:
  valkey_data:
  qdrant_data:
